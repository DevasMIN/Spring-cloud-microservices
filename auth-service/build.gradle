plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.google.cloud.tools.jib'
}

group = 'com.logistics'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    runtimeOnly 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation "com.redis:testcontainers-redis:2.2.2"
    testImplementation "org.testcontainers:testcontainers:1.20.4"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

jib {
    from {
        image = 'eclipse-temurin:21-jre-jammy'
    }
    to {
        image = "auth-service:${version}"
        tags = ['latest']
    }
    container {
        ports = ['8081']
        creationTime = 'USE_CURRENT_TIMESTAMP'
        environment = [
            'SPRING_PROFILES_ACTIVE': 'docker',
            'SPRING_CLOUD_CONFIG_URI': 'http://config-service:8888',
            'SPRING_CLOUD_CONFIG_USERNAME': 'config-server',
            'SPRING_CLOUD_CONFIG_PASSWORD': 'configpassword',
            'SPRING_DATASOURCE_URL': 'jdbc:postgresql://postgres:5432/auth_db',
            'SPRING_DATASOURCE_USERNAME': 'postgres',
            'SPRING_DATASOURCE_PASSWORD': 'postgres',
            'SPRING_REDIS_HOST': 'redis',
            'SPRING_REDIS_PORT': '6379',
            'SPRING_REDIS_PASSWORD': 'redis_password',
            'EUREKA_CLIENT_SERVICEURL_DEFAULTZONE': 'http://discovery-service:8761/eureka/'
        ]
    }
}

